***	***	***	***	***	***	***	***	***	***	***	***	***	***	***	***	***	***	*
*** I RECOMMEND READING THIS WEBISTE: https://github.com/R4meau/libft ***
*** ***	***	***	***	***	***	***	***	***	***	***	***	***	***	***	***	***	*

//What is a libft?
It's basically a folder with a bunch of ft_function.c files. It's as if we're organizing everything so that we can use them for later use.

//What are .a files?
.a files are static libraries typically generated by the archive tool.

//What is static?
First off, there are '3' types of allocating(distributing) memory and static is one of them: static, dynamic, and automatic.
I will only define "dynamic and static."

STATIC: It is the memory for a variables that are allocated(distributed) when a program starts
--C examples below:
int a = 32; //used "outside" of function
static int a = 32; //used "inside" of a function

extern and static = separate clases of variables in C

extern int a; //declaration
int a; //definition(existence)





DYNAMIC: It is a memory allocated(distributed) at runtime using "calloc(), malloc()," and others'.
--Also known as "heap", but has no relation to the heap data structure.
--C example below:

int * a = malloc(sizeof(int));

--The heap mem. is persistent(constant),
--until free() is called upon to give freedom to the mem caged in the city of function.
--In other words, we can control the lifetime of the variable.

--xtra: "calloc()" and "malloc()" are library functions that allocate(distribute) memory dynamically
--For reference: "https://www.geeksforgeeks.org/calloc-versus-malloc/"
--xtra: "heap" is basically a portion of where memory is "dynamically allocated" residing
--For reference: "https://stackoverflow.com/questions/2308751/what-is-a-memory-heap"

//How do I gcc the files?
Step 1.
Files must be converted into .o files standing for object "filename.o"
Use gcc -c "filename.c" into gcc -c "filename.o" (you're simply changing the extension from .c to .o

Step 2.
All files converted to .o? I hope so.
Next we use an ar tool to create the lib, which stands for typing: "man ar"
With options rc:
-c: the -c option is specified, ar creates the archive silently.
-r: replace or add the specified files to the archive.  If the archive does not exist a new archive file is created.  
Files that replace existing files do not change the order of the files within the archive.

Creating a lib will name it libstr.a (Why? Because all libs in 42 are by lib--imo)

ADDING FILES aka CREATING libstr.a:
ar rc libstr.a filename1.o filename2.o

//How to use?
gcc main.c -L. -lstr 

-L. - looks for the library
-lstr - is the name of the library

You can move your libstr.c anywhere and or move into nfs dir to link from there.

Instead of having gcc look for the files, which can be time consuming a command "ranlib" can be used.

It will simply takes the lib as a parameter and creates an index in that lib, so that the gcc will know where to go. It will set the files in positions ie., ft_putchar position 1, ft_swap position 3, etc.
